{"version":3,"sources":["comp/asset/red.mp3","comp/asset/green.mp3","comp/asset/blue.mp3","comp/asset/yellow.mp3","comp/asset/success.wav","comp/asset/failure.wav","comp/Simon.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SoundMap","red","require","green","blue","yellow","correct","incorrect","ColorMap","ColorTypeKeys","Object","keys","ActiveColorMap","activeColorMap","forEach","key","lighten","TURN_DELAY","Simon","state","count","started","gameOver","win","strictMode","userTurn","sequenceArr","userPlay","replaying","prompt","toggleStrict","_this","setState","prevState","toggleStart","resetBoard","setTimeout","cb","onGameWin","gameWinSound","window","Audio","loop","play","cnt","id","setInterval","clearInterval","flashColorsOnReset","i","length","color","simulateClick","document","getElementById","elem","mute","console","warn","style","backgroundColor","error","computerTurn","_this$state","sequence","slice","concat","Math","floor","random","element","handleUserMove","evt","_this$state2","t","currentTarget","getDisplay","_this$state3","String","_this$state4","this","log","_this2","_this$state5","react","MainContainer","GameWrapper","ScoreAndButtons","Title","Count","ControlButtons","ControlButtonContainer","margin","ControlButton","onClick","ButtonText","ButtonIndicatorLight","on","warning","map","ColoredButton","type","disabled","Prompt","React","styled","div","_templateObject","_templateObject2","h1","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","props","_templateObject8","_templateObject9","_templateObject10","button","_templateObject11","css","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","App","react_default","a","createElement","Container","Simon_Simon","Component","App_templateObject","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","App_App","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ce6722c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red.319c7710.mp3\";","module.exports = __webpack_public_path__ + \"static/media/green.c3c86e71.mp3\";","module.exports = __webpack_public_path__ + \"static/media/blue.f4a912ee.mp3\";","module.exports = __webpack_public_path__ + \"static/media/yellow.f3c18b98.mp3\";","module.exports = __webpack_public_path__ + \"static/media/success.8849ef31.wav\";","module.exports = __webpack_public_path__ + \"static/media/failure.f768a2ef.wav\";","//@flow strict\nimport * as React from \"react\";\nimport { lighten } from \"polished\";\nimport styled, { css } from \"styled-components\";\n\n// sounds associated with each of the colors. Used in handleUserMove\nconst SoundMap: { [string]: string } = {\n  red: require('./asset/red.mp3'),\n  green: require('./asset/green.mp3'),\n  blue: require('./asset/blue.mp3'),\n  yellow: require('./asset/yellow.mp3'),\n  correct: require('./asset/success.wav'),\n  incorrect: require('./asset/failure.wav')\n};\n\nconst ColorMap = {\n  red: \"#d13045\",\n  green: \"#51bc0f\",\n  blue: \"#31afea\",\n  yellow: \"#ead746\"\n};\n\ntype ColorType = $Keys<typeof ColorMap>;\n\n// union type of ColorMap keys - used to type IDs of button elements & pass styled compnent props\nconst ColorTypeKeys: ColorType[] = Object.keys(ColorMap);\n\n// factory to generate a new color map of lighter colors\nconst ActiveColorMap = (() => {\n  const activeColorMap = {};\n  ColorTypeKeys.forEach(key => {\n    activeColorMap[key] = lighten(0.35, ColorMap[key]);\n  });\n\n  return activeColorMap;\n})();\n\ntype State = {\n  count: number,\n  started: boolean,\n  gameOver: boolean,\n  win: boolean,\n  strictMode: boolean,\n  userTurn: boolean,\n  sequenceArr: ColorType[],\n  userPlay: number,\n  replaying: boolean,\n  prompt: string\n};\n\nconst WIN_THRESHOLD: number = 21;\nconst TURN_DELAY: number = 1000;\n\nconst DEBUG = false;\n\nconst log = (...args) => {\n  if (DEBUG) {\n    console.log(...args);\n  }\n};\n\n// TODO - when computer is playing a sequence,\n// the interval ids of each method pushed to the call stack should\n// be stashed in an array to be looped and cleared if something interrupts\n// the computer's turn\n\nexport default class Simon extends React.Component<{}, State> {\n  // TODO - replace game state booleans with enums to reduce async complication\n  state = {\n    count: 0,\n    started: false,\n    gameOver: false,\n    win: false,\n    strictMode: false,\n    userTurn: false,\n    sequenceArr: [],\n    userPlay: 0,\n    replaying: false,\n    prompt: \"Press start to begin\"\n  };\n\n  componentDidUpdate() {\n    const { count, userPlay, gameOver, started, userTurn } = this.state;\n\n    log(`ComponentDidMount():\n      count: ${count}, \n      userPlay: ${userPlay}, \n      gameOver: ${String(gameOver)},\n      started: ${String(started)},\n      userTurn: ${String(started)}\n    `);\n\n    // user wins game if 20 steps completed\n    if (!gameOver && count === WIN_THRESHOLD) {\n      this.onGameWin();\n    }\n\n    // check if computer's turn\n    if (started && !userTurn && !gameOver) {\n      console.log(\n        `Computer turn pushed to call stack with ${TURN_DELAY}ms delay`\n      );\n      setTimeout(this.computerTurn, TURN_DELAY);\n    }\n\n    // modify count & play success sound if the user has played all colors in sequence & game not over\n    if (count === userPlay && !gameOver) {\n      const successSound = new window.Audio(SoundMap.correct);\n      successSound.play();\n\n      this.setState(prevState => ({\n        count: prevState.count + 1,\n        userTurn: false\n      }));\n    }\n  }\n\n  /********************   GAME CONTROL FUNCTION   ********************/\n  toggleStrict = () => {\n    this.setState(prevState => ({ strictMode: !prevState.strictMode }));\n  };\n\n  toggleStart = () => {\n    this.resetBoard(() => {\n      const prompt = !this.state.started\n        ? \"Get 20 in a row to win!\"\n        : \"Press start to begin\";\n      this.setState(\n        {\n          count: 1,\n          started: true,\n          userTurn: false,\n          sequenceArr: [],\n          prompt: prompt\n        },\n        () => {\n          setTimeout(() => this.setState({ prompt: \"\" }), 3000);\n        }\n      );\n    });\n  };\n\n  /********************   GAME EVENT LOGIC   ********************/\n\n  resetBoard = (cb?: () => void) => {\n    this.setState(\n      {\n        count: 0,\n        started: false,\n        userTurn: false,\n        sequenceArr: [],\n        userPlay: 0,\n        replaying: false,\n        gameOver: false,\n        win: false,\n        prompt: \"Press start to begin\"\n      },\n      cb\n    );\n  };\n\n  onGameWin = () => {\n    this.setState(\n      {\n        gameOver: true,\n        win: true,\n        prompt: \"You broke the machine!\"\n      },\n      () => {\n        // loop success sound\n        const gameWinSound: HTMLAudioElement = new window.Audio(\n          SoundMap.correct\n        );\n        gameWinSound.loop = true;\n        gameWinSound.play();\n        setTimeout(() => (gameWinSound.loop = false), 5000);\n\n        // loop flashing lights\n        let cnt = 0;\n        const id = setInterval(() => {\n          if (cnt === 5) {\n            clearInterval(id);\n            this.resetBoard();\n          } else this.flashColorsOnReset();\n          cnt++;\n        }, 900);\n      }\n    );\n  };\n\n  flashColorsOnReset = (): void => {\n    for (let i = 0; i < ColorTypeKeys.length; i++) {\n      const color = ColorTypeKeys[i];\n      this.simulateClick(document.getElementById(color), color, true);\n    }\n  };\n\n  simulateClick = (\n    elem: HTMLElement | null,\n    color: ColorType,\n    mute?: boolean | void\n  ) => {\n    console.warn(\"Simulate click\", elem, color);\n    if (elem) {\n      // play sound\n      if (!mute) {\n        let audioObj: HTMLAudioElement = new window.Audio(SoundMap[color]);\n        audioObj.play();\n      }\n      elem.style.backgroundColor = ActiveColorMap[color];\n      setTimeout(() => {\n        elem.style.backgroundColor = \"\";\n      }, 600);\n    } else {\n      console.error(\"Failed to call simulate click on null element\");\n    }\n  };\n\n  /********************   GAME SIMULATION LOGIC   ********************/\n\n  computerTurn = () => {\n    const { count, sequenceArr, replaying } = this.state;\n\n    // only run if a single new color hasn't yet been added to the sequence\n    // count will be updated after user moves correctly\n    if (count > sequenceArr.length || replaying) {\n      const randomColor = () => ColorTypeKeys[Math.floor(Math.random() * 4)];\n      // if replaying, reuse sequence, else add new color to end\n      let sequence = replaying\n        ? sequenceArr\n        : sequenceArr.slice().concat(randomColor());\n\n      // for every color in sequence, push a simulated click to call stack\n      const iterateOverSequence = sequence => {\n        sequence.forEach((color, i) => {\n          setTimeout(() => {\n            let element: HTMLElement | null = document.getElementById(color);\n            this.simulateClick(element, color);\n          }, i * TURN_DELAY);\n        });\n      };\n\n      const endingCallback = () => {\n        iterateOverSequence(this.state.sequenceArr);\n        this.setState({\n          userPlay: 0,\n          replaying: false,\n          userTurn: true\n        });\n      };\n\n      this.setState({ sequenceArr: sequence }, endingCallback);\n    }\n  };\n\n  handleUserMove = (evt: SyntheticEvent<HTMLButtonElement>) => {\n    const { started, userTurn, sequenceArr, strictMode, userPlay, replaying } = this.state;\n    const t: HTMLButtonElement = evt.currentTarget; // https://flow.org/en/docs/react/events/\n\n    if (started && userTurn && !replaying) {\n      // TODO - change to a non-DOM paradigm\n      // play sound on button press\n      const color = t.id;\n      // $FlowFixMe\n      const audioObj: HTMLAudioElement = new window.Audio(SoundMap[color]);\n      audioObj.play();\n\n      // if user toggles incorrectly\n      if (color !== sequenceArr[userPlay]) {\n        let cnt = 0;\n        const id = setInterval(() => {\n          if (cnt === 2) {\n            clearInterval(id);\n\n            // reset state & start at one\n            if (strictMode) {\n              this.resetBoard(() => {\n                this.setState({\n                    count: 0,\n                    started: true,\n                    prompt: \"To prevent restarting, turn strict mode off\"\n                  }, () => {\n                    setTimeout(() => this.setState({ prompt: \"\" }), 5000);\n                  });\n              });\n            }\n\n            // if strictMode off, turn on replaying, set user play to 0, and let computer move\n            else {\n              this.setState({\n                replaying: true,\n                userPlay: 0,\n                userTurn: false\n              });\n            }\n          } else {\n            // flash colors & play failure sound in every case\n            this.flashColorsOnReset();\n            const failureSound = new window.Audio(SoundMap.incorrect);\n            failureSound.play();\n          }\n\n          cnt++;\n        }, 900);\n      }\n      // if user plays correct color, play sound & add 1 to userPlay (used to evaluate the next index of sequenceArr)\n      else {\n        this.setState(prevState => ({ userPlay: prevState.userPlay + 1 }));\n      }\n    }\n  };\n\n  /********************   UI LOGIC   ********************/\n\n  // return the appropriate value to display to the user based on game state\n  getDisplay = (): string => {\n    const { started, gameOver, win, count } = this.state;\n    if (!started) return \"--\";\n    if (gameOver) return win ? \"win\" : \"xx\";\n    return String(count);\n  };\n\n  render() {\n    const { strictMode, prompt, replaying, userTurn } = this.state;\n\n    return (\n      <MainContainer>\n        <GameWrapper>\n          <ScoreAndButtons>\n            <Title>Simon</Title>\n            <Count>{this.getDisplay()}</Count>\n            <ControlButtons>\n              <ControlButtonContainer margin=\"0 45px 0 0\">\n                <ControlButton onClick={this.toggleStart} />\n                <ButtonText>Start</ButtonText>\n              </ControlButtonContainer>\n              <ControlButtonContainer>\n                <ButtonIndicatorLight on={strictMode} />\n                <ControlButton warning onClick={this.toggleStrict} />\n                <ButtonText>Strict</ButtonText>\n              </ControlButtonContainer>\n            </ControlButtons>\n          </ScoreAndButtons>\n          {ColorTypeKeys.map(t => (\n            <ColoredButton\n              key={t}\n              type={t}\n              id={t}\n              onClick={this.handleUserMove}\n              disabled={replaying || !userTurn}\n            />\n          ))}\n        </GameWrapper>\n        <Prompt>{prompt}</Prompt>\n      </MainContainer>\n    );\n  }\n}\n\n// style\n\nconst MainContainer = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  position: absolute;\n  height: 700px;\n  width: 700px;\n`;\n\nconst GameWrapper = styled.div`\n  border: solid 15px #0c001e;\n  height: 600px;\n  width: 600px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: center;\n  background-color: #0c001e;\n  border-radius: 40%;\n  position: relative;\n  box-shadow: 2px 2px 5px #666;\n`;\n\nconst Title = styled.h1`\n  font-family: \"Gravitas One\", \"Orbitron\", cursive, sans-serif;\n  font-size: 50px;\n  margin-bottom: 10px;\n  margin-top: 20px;\n`;\n\nconst Count = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #0c001e;\n  height: 90px;\n  width: 150px;\n  border-radius: 15%;\n  font-size: 78px;\n  font-weight: bold;\n  color: #d13045;\n  font-family: \"Digital\", \"Orbitron\", sans-serif;\n  border: solid 5px gray;\n  padding-bottom: 10px;\n  box-shadow: 1px 1px 5px #888888;\n`;\n\nconst ScoreAndButtons = styled.div`\n  position: absolute;\n  z-index: 2;\n  background-color: #e0d2bc;\n  height: 320px;\n  width: 320px;\n  border-radius: 40%;\n  border: solid 30px #0c001e;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst ControlButtons = styled.div`\n  display: flex;\n  padding: 20px;\n  margin-left: 20px;\n`;\n\nconst ControlButtonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: ${props => (props.margin ? props.margin : \"0 0 0 45px\")};\n  line-height: 1px;\n`;\n\nconst ControlButton = styled.div`\n  height: 30px;\n  width: 30px;\n  margin-top: ${props => (props.warning ? 0 : 8)}px;\n  border-radius: 50%;\n  border: solid 5px black;\n  background-color: ${props => (props.warning ? \"#EAD746\" : \"#D13045\")};\n  box-shadow: 2px 2px 3px #888888;\n\n  :hover {\n    background-color: ${props => (props.warning ? \"#DDCB42\" : \"#BA1A3C\")};\n    box-shadow: 0 2px #666;\n    transform: translateY(1px);\n  }\n`;\n\nconst ButtonText = styled.p`\n  font-family: sans-serif;\n`;\n\nconst ButtonIndicatorLight = styled.div`\n  height: 10px;\n  width: 10px;\n  border-radius: 50%;\n  background-color: ${props => (props.on ? \"#D13045\" : \"#0C001E\")};\n  margin: 0 0 0 40px;\n  border: solid 0.9px black;\n  box-shadow: 1px 1px 1px #888888;\n`;\n\nconst ColoredButton = styled.button`\n  height: 260px;\n  width: 260px;\n  padding: 0;\n  overflow: hidden;\n  position: relative;\n  z-index: 1;\n  border: none;\n  outline: none;\n\n  ${props => {\n    switch (props.type) {\n      case \"red\":\n        return css`\n          border-top-left-radius: 80%;\n          background-color: ${ColorMap[props.type]};\n          :active {\n            background-color: ${ActiveColorMap[props.type]};\n            box-shadow: 0 2px #666;\n            transform: translateY(1px);\n          }\n        `;\n      case \"green\":\n        return css`\n          border-top-right-radius: 80%;\n          background-color: ${ColorMap[props.type]};\n          :active {\n            background-color: ${ActiveColorMap[props.type]};\n            box-shadow: 0 2px #666;\n            transform: translateY(1px);\n          }\n        `;\n      case \"blue\":\n        return css`\n          border-bottom-left-radius: 80%;\n          background-color: ${ColorMap[props.type]};\n          :active {\n            background-color: ${ActiveColorMap[props.type]};\n            box-shadow: 0 2px #666;\n            transform: translateY(1px);\n          }\n        `;\n      case \"yellow\":\n        return css`\n          border-bottom-right-radius: 80%;\n          background-color: ${ColorMap[props.type]};\n          :active {\n            background-color: ${ActiveColorMap[props.type]};\n            box-shadow: 0 2px #666;\n            transform: translateY(1px);\n          }\n        `;\n      default: // do nothing\n    }\n  }}\n`;\n\nconst Prompt = styled.p`\n  position: relative;\n  bottom: 0;\n  color: white;\n  font-size: 24px;\n  font-weight: bold;\n  margin: 20px 0;\n  padding: 0;\n  font-family: \"Ubuntu\", sans-serif;\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Simon from './comp/Simon.js'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Container>\n        <Simon />\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  margin-top: 100px;\n`;\n\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}